import streamlit as st
import requests
import json
import pandas as pd
import datetime

st.set_page_config(layout="wide")
st.title("üìä Wialon: –æ—Ç—á—ë—Ç –∫–∞–∫ —Ç–∞–±–ª–∏—Ü–∞")

TOKEN = "c611c2bab48335e36a4b59be460c57d2DC99601D0C49777B24DFE07B7614A2826A62C393"
BASE_URL = "https://hst-api.wialon.host/wialon/ajax.html"

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
@st.cache_data
def login(token):
    params = {"svc": "token/login", "params": json.dumps({"token": token})}
    return requests.get(BASE_URL, params=params).json().get("eid")

SID = login(TOKEN)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —é–Ω–∏—Ç–æ–≤
@st.cache_data
def get_items(sid, item_type, flags):
    params = {
        "svc": "core/search_items",
        "params": json.dumps({
            "spec": {
                "itemsType": item_type,
                "propName": "sys_name",
                "propValueMask": "*",
                "sortType": "sys_name",
                "propType": "property"
            },
            "force": 1,
            "flags": flags,
            "from": 0,
            "to": 0
        }),
        "sid": sid
    }
    return requests.get(BASE_URL, params=params).json().get("items", [])

units = get_items(SID, "avl_unit", 1)
resources = get_items(SID, "avl_resource", 8193)

if not units or not resources:
    st.warning("–ù–µ—Ç —é–Ω–∏—Ç–æ–≤ –∏–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤.")
    st.stop()

unit_dict = {u["nm"]: u["id"] for u in units}
res_dict = {r["nm"]: r for r in resources}

# UI
unit_name = st.selectbox("–í—ã–±–µ—Ä–∏ —é–Ω–∏—Ç", list(unit_dict.keys()))
res_name = st.selectbox("–í—ã–±–µ—Ä–∏ —Ä–µ—Å—É—Ä—Å", list(res_dict.keys()))
tpl_dict = {tpl["n"]: tpl["id"] for tpl in res_dict[res_name]["rep"].values()}
tpl_name = st.selectbox("–í—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω –æ—Ç—á—ë—Ç–∞", list(tpl_dict.keys()))
interval_label = st.selectbox("–ü–µ—Ä–∏–æ–¥", ["–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å", "–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è", "–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"])
interval_seconds = {"–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å": 86400, "–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è": 604800, "–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü": 2592000}[interval_label]

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞
def execute_report(sid, res_id, tpl_id, unit_id, interval):
    to_time = int(datetime.datetime.now().timestamp())
    from_time = to_time - interval
    params = {
        "svc": "report/exec_report",
        "params": json.dumps({
            "reportResourceId": res_id,
            "reportTemplateId": tpl_id,
            "reportObjectId": unit_id,
            "reportObjectSecId": 0,
            "interval": {"from": from_time, "to": to_time, "flags": 0}
        }),
        "sid": sid
    }
    return requests.get(BASE_URL, params=params).json()

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–æ–∫ –æ—Ç—á—ë—Ç–∞
def load_report_rows(sid, table_index, row_count):
    params = {
        "svc": "report/get_result_rows",
        "params": json.dumps({
            "tableIndex": table_index,
            "indexFrom": 0,
            "indexTo": row_count
        }),
        "sid": sid
    }
    return requests.get(BASE_URL, params=params).json()

# –ö–Ω–æ–ø–∫–∞
if st.button("üì• –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç"):
    report_data = execute_report(SID, res_dict[res_name]["id"], tpl_dict[tpl_name], unit_dict[unit_name], interval_seconds)

    if "reportResult" in report_data:
        for table_index, table in enumerate(report_data["reportResult"]["tables"]):
            st.subheader(table["label"])
            rows = load_report_rows(SID, table_index, table["rows"])

            if "rows" in rows:
                parsed_data = []
                for row in rows["rows"]:
                    parsed_row = []
                    for cell in row.get("c", []):
                        if isinstance(cell, dict):
                            parsed_row.append(cell.get("t", json.dumps(cell)))
                        else:
                            parsed_row.append(cell)
                    parsed_data.append(parsed_row)

                df = pd.DataFrame(parsed_data, columns=table["header"])
                st.dataframe(df, use_container_width=True)
            else:
                st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫ –æ—Ç—á—ë—Ç–∞")
                st.json(rows)
    else:
        st.warning("–û—Ç—á—ë—Ç –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª.")
