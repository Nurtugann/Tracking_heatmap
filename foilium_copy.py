import streamlit as st
import pandas as pd
import numpy as np
import json

st.set_page_config(layout="wide")
st.title("üî• –¢–µ–ø–ª–æ–∫–∞—Ä—Ç–∞ —Å –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—ã–º–∏ —Å–ª–æ—è–º–∏ (JS + Leaflet) - –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è")

# --------------------------------------------------------------------------------
# 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
# --------------------------------------------------------------------------------
@st.cache_data
def load_data():
    df = pd.read_csv("data.csv")
    df["–ù–∞—á–∞–ª–æ"] = pd.to_datetime(df["–ù–∞—á–∞–ª–æ"], errors="coerce")
    df["–ö–æ–Ω–µ—Ü"]  = pd.to_datetime(df["–ö–æ–Ω–µ—Ü"],  errors="coerce")
    return df

df = load_data()

# --------------------------------------------------------------------------------
# 2. –§–∏–ª—å—Ç—Ä—ã (—Å–ª–∞–π–¥–µ—Ä –¥–∞—Ç –∏ –≤—ã–±–æ—Ä –∞–≥–µ–Ω—Ç–∞)
# --------------------------------------------------------------------------------
min_time = df["–ù–∞—á–∞–ª–æ"].min()
max_time = df["–ö–æ–Ω–µ—Ü"].max()

time_range = st.slider(
    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥",
    min_value=min_time.to_pydatetime(),
    max_value=max_time.to_pydatetime(),
    value=(min_time.to_pydatetime(), max_time.to_pydatetime())
)

filtered_df = df[
    (df["–ù–∞—á–∞–ª–æ"] >= time_range[0]) &
    (df["–ö–æ–Ω–µ—Ü"]  <= time_range[1])
]

agents = ["–í—Å–µ"] + sorted(filtered_df["–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞"].dropna().unique())
selected_agent = st.selectbox("–ê–≥–µ–Ω—Ç", agents)
if selected_agent != "–í—Å–µ":
    filtered_df = filtered_df[filtered_df["–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞"] == selected_agent]


# --------------------------------------------------------------------------------
# 3. –†–∞—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è (–Ω–∞–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
# --------------------------------------------------------------------------------
def calculate_time_spent(df_local, threshold=1e-4):
    """
    –ù–∞–∏–≤–Ω—ã–π, –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–∞—Å—á—ë—Ç—É dwelling_time,
    –≤ –∫–æ—Ç–æ—Ä–æ–º –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–±–∏—Ä–∞—é—Ç—Å—è –ø–∞—Ä—ã –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.
    """
    df_copy = df_local.copy()
    df_copy.sort_values(by=["–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞", "–ù–∞—á–∞–ª–æ"], inplace=True)
    df_copy["dwelling_time"] = 0.0
    
    for group, group_data in df_copy.groupby("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞"):
        indices = group_data.index.to_list()
        for i in range(len(indices) - 1):
            i0, i1 = indices[i], indices[i + 1]
            dist = np.sqrt(
                (group_data.loc[i0, "latitude_–∫–æ–Ω–µ—á"] - group_data.loc[i1, "latitude_–Ω–∞—á"]) ** 2 +
                (group_data.loc[i0, "longitude_–∫–æ–Ω–µ—á"] - group_data.loc[i1, "longitude_–Ω–∞—á"]) ** 2
            )
            if dist < threshold:
                t0 = group_data.loc[i0, "–ö–æ–Ω–µ—Ü"]
                t1 = group_data.loc[i1, "–ù–∞—á–∞–ª–æ"]
                if pd.notnull(t0) and pd.notnull(t1):
                    delta = (t1 - t0).total_seconds()
                    if delta > 0:
                        df_copy.at[i0, "dwelling_time"] = delta
    return df_copy

df_time = calculate_time_spent(filtered_df)
df_time_sum = df_time.groupby(["latitude_–∫–æ–Ω–µ—á", "longitude_–∫–æ–Ω–µ—á"], dropna=False)["dwelling_time"].sum().reset_index()


heat_points = []
for _, row in df_time_sum.iterrows():
    lat = row["latitude_–∫–æ–Ω–µ—á"]
    lon = row["longitude_–∫–æ–Ω–µ—á"]
    val = row["dwelling_time"]
    if pd.notnull(lat) and pd.notnull(lon) and val > 0:
        # –û–±—Ä–µ–∑–∞–µ–º —Å–Ω–∏–∑—É –∏ —Å–≤–µ—Ä—Ö—É
        # –ù–æ—Ä–º–∏—Ä—É–µ–º –≤ [0..1]:
        heat_points.append([lat, lon, 1])


# --------------------------------------------------------------------------------
# 5. –°–ª–æ–π "–û—Å—Ç–∞–Ω–æ–≤–∫–∏" (–¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ —Å popup)
# --------------------------------------------------------------------------------
detailed_events = df_time[df_time["dwelling_time"] > 0].copy()
detailed_events["–ü—Ä–∏–±—ã—Ç–∏–µ"] = detailed_events["–ö–æ–Ω–µ—Ü"] + pd.to_timedelta(detailed_events["dwelling_time"], unit="s")
detailed_events["–ö–æ–Ω–µ—Ü_str"] = detailed_events["–ö–æ–Ω–µ—Ü"].dt.strftime("%Y-%m-%d %H:%M:%S")
detailed_events["–ü—Ä–∏–±—ã—Ç–∏–µ_str"] = detailed_events["–ü—Ä–∏–±—ã—Ç–∏–µ"].dt.strftime("%Y-%m-%d %H:%M:%S")

markers_js = ""
for _, row in detailed_events.iterrows():
    lat = row["latitude_–∫–æ–Ω–µ—á"]
    lon = row["longitude_–∫–æ–Ω–µ—á"]
    agent = row["–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞"]
    popup_text = (
        f"–ê–≥–µ–Ω—Ç: {agent}<br>"
        f"–ü—Ä–∏–±—ã—Ç–∏–µ: {row['–ö–æ–Ω–µ—Ü_str']}<br>"
        f"–û—Ç—ä–µ–∑–¥: {row['–ü—Ä–∏–±—ã—Ç–∏–µ_str']}"
    )
    if pd.notnull(lat) and pd.notnull(lon):
        popup_text_escaped = popup_text.replace("'", "\\'")
        markers_js += (
            f"L.circleMarker([{lat}, {lon}], "
            "{radius: 3, color: 'purple', fillOpacity: 0.8})"
            f".bindPopup('{popup_text_escaped}')"
            ".addTo(markerLayer);\n"
        )

# --------------------------------------------------------------------------------
# 6. –ó–∞–≥—Ä—É–∑–∫–∞ geojson: –≥—Ä–∞–Ω–∏—Ü—ã —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
# --------------------------------------------------------------------------------
with open("geoBoundaries-KAZ-ADM2.geojson", "r", encoding="utf-8") as f:
    region_geojson = json.load(f)
region_geojson_str = json.dumps(region_geojson)

with open("hotosm_kaz_populated_places_points_geojson.geojson", "r", encoding="utf-8") as f:
    city_geojson = json.load(f)

city_markers_js = ""
for feature in city_geojson.get("features", []):
    geom = feature.get("geometry", {})
    props = feature.get("properties", {})
    if not geom or not props:
        continue
    if geom.get("type") == "Point" and "coordinates" in geom:
        lon, lat = geom["coordinates"]
        name = props.get("name") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        name_escaped = name.replace("'", "\\'")
        city_markers_js += (
            f"var marker = L.marker([{lat}, {lon}]).bindPopup('{name_escaped}');\n"
            "cityMarkerCluster.addLayer(marker);\n"
        )

# --------------------------------------------------------------------------------
# 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ HTML + JS (—É–∫–∞–∑—ã–≤–∞–µ–º max: 1.0)
# --------------------------------------------------------------------------------
html_template = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Leaflet HeatMap</title>

    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />

    <!-- –ú–∞—Ä–∫–µ—Ä-–∫–ª–∞—Å—Ç–µ—Ä –ø–ª–∞–≥–∏–Ω -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet.markercluster@1.4.1/dist/MarkerCluster.Default.css" />

    <style>
        #mapid {{
            height: 800px;
            width: 100%;
        }}
    </style>
</head>
<body>
    <div id='mapid'></div>

    <!-- Leaflet JS -->
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>

    <!-- –ú–∞—Ä–∫–µ—Ä-–∫–ª–∞—Å—Ç–µ—Ä –ø–ª–∞–≥–∏–Ω -->
    <script src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"></script>

    <!-- Leaflet-heat –ø–ª–∞–≥–∏–Ω -->
    <script src="https://unpkg.com/leaflet.heat/dist/leaflet-heat.js"></script>

    <script>
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
        var map = L.map('mapid').setView([48.0, 68.0], 5);

        // –ü–æ–¥–ª–æ–∂–∫–∞
        L.tileLayer('https://{{s}}.basemaps.cartocdn.com/light_all/{{z}}/{{x}}/{{y}}.png', {{
            attribution: '&copy; OpenStreetMap contributors'
        }}).addTo(map);

        // ----- –°–ª–æ–π "–ì—Ä–∞–Ω–∏—Ü—ã —Ä–µ–≥–∏–æ–Ω–æ–≤" -----
        var regionGeoJson = {region_geojson_str};
        var regionLayer = L.geoJson(regionGeoJson, {{
            style: function(feature) {{
                return {{
                    color: 'black',
                    weight: 1,
                    fillOpacity: 0
                }};
            }}
        }});

        // ----- –°–ª–æ–π "–¢–µ–ø–ª–æ–∫–∞—Ä—Ç–∞" -----
        var heatData = {json.dumps(heat_points)};
        var heatLayer = L.heatLayer(heatData, {{
            radius: 20,
            blur: 10,
            maxZoom: 10,
        }});

        // ----- –°–ª–æ–π "–û—Å—Ç–∞–Ω–æ–≤–∫–∏" (dwelling_time) -----
        var markerLayer = L.layerGroup();
        {markers_js}

        // ----- –°–ª–æ–π "–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã" (–∫–ª–∞—Å—Ç–µ—Ä) -----
        var cityMarkerCluster = L.markerClusterGroup();
        {city_markers_js}

        // –°–æ–±–∏—Ä–∞–µ–º –æ–≤–µ—Ä–ª–µ–∏
        var baseMaps = {{}};
        var overlayMaps = {{
            "–ì—Ä–∞–Ω–∏—Ü—ã —Ä–µ–≥–∏–æ–Ω–æ–≤": regionLayer,
            "–ù–∞—Å–µ–ª—ë–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã (–∫–ª–∞—Å—Ç–µ—Ä)": cityMarkerCluster,
            "–¢–µ–ø–ª–æ–∫–∞—Ä—Ç–∞ (dwelling_time)": heatLayer,
            "–û—Å—Ç–∞–Ω–æ–≤–∫–∏ (–ø–æ–¥—Ä–æ–±–Ω–æ)": markerLayer
        }};

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–ª–æ—ë–≤
        L.control.layers(baseMaps, overlayMaps, {{collapsed: false}}).addTo(map);

        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–∏
        regionLayer.addTo(map);
        heatLayer.addTo(map);
    </script>
</body>
</html>
"""

# --------------------------------------------------------------------------------
# 8. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã —á–µ—Ä–µ–∑ Streamlit
# --------------------------------------------------------------------------------
st.components.v1.html(html_template, height=800, width=1400)
