import streamlit as st
import requests
import json
import datetime
import pandas as pd
import geopandas as gpd
from shapely.geometry import Point
import re
import io

st.set_page_config(layout="wide")
st.title("üöó –ö–∞—Ä—Ç–∞ —Ç—Ä–µ–∫–∞ + üìä –û—Ç—á—ë—Ç—ã + üó∫Ô∏è –ü–µ—Ä–µ—Ö–æ–¥—ã —Ä–µ–≥–∏–æ–Ω–æ–≤ (–ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —é–Ω–∏—Ç–∞–º)")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
TOKEN = "c611c2bab48335e36a4b59be460c57d2BF8416B73C4A65F2B8A88A5848E97CD4471F14C6"
BASE_URL = "https://hst-api.wialon.host/wialon/ajax.html"
REGIONS_GEOJSON = "OSMB-f1ec2d0019a5c0c4984f489cdc13d5d26a7949fd.geojson"
CITIES_GEOJSON = "hotosm_kaz_populated_places_points_geojson.geojson"

@st.cache_data
def login(token):
    r = requests.get(
        BASE_URL,
        params={
            "svc": "token/login",
            "params": json.dumps({"token": token})
        }
    )
    return r.json().get("eid")

@st.cache_data
def get_items(sid, item_type, flags):
    r = requests.get(
        BASE_URL,
        params={
            "svc": "core/search_items",
            "params": json.dumps({
                "spec": {
                    "itemsType": item_type,
                    "propName": "sys_name",
                    "propValueMask": "*",
                    "sortType": "sys_name"
                },
                "force": 1,
                "flags": flags,
                "from": 0,
                "to": 0
            }),
            "sid": sid
        }
    )
    return r.json().get("items", [])

# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —é–Ω–∏—Ç–æ–≤/—Ä–µ—Å—É—Ä—Å–æ–≤ ---
SID = login(TOKEN)
units = get_items(SID, "avl_unit", 1)
resources = get_items(SID, "avl_resource", 8193)
if not resources or not units:
    st.error("–ù–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–ª–∏ —é–Ω–∏—Ç–æ–≤.")
    st.stop()

unit_dict = {u["nm"]: u["id"] for u in units}
selected_units = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —é–Ω–∏—Ç—ã (–¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ –∏ –∫–∞—Ä—Ç—ã):", list(unit_dict))
if not selected_units:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —é–Ω–∏—Ç.")
    st.stop()

res = resources[0]
tpl_id = list(res["rep"].values())[0]["id"]

# --- –ë–ª–æ–∫ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≥–æ –¥–Ω—è ---
today = datetime.date.today()
selected_dates = st.date_input(
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç",
    value=(today, today),
    help="–î–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞: –∫–ª–∏–∫–Ω–∏—Ç–µ –¥–∞—Ç—É, –∑–∞—Ç–µ–º —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ Shift –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é –¥–∞—Ç—É"
)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã –∫–æ—Ä—Ç–µ–∂ –∏–∑ –¥–≤—É—Ö –¥–∞—Ç
if isinstance(selected_dates, tuple) and len(selected_dates) == 2:
    date_from, date_to = selected_dates
else:
    date_from = date_to = selected_dates

# –ó–î–ï–°–¨ –ù–ï–õ–¨–ó–Ø —Å—Ä–∞–∑—É –≤—ã—á–∏—Å–ª—è—Ç—å from_ts –∏ to_ts, 
# –ø–æ—Å–∫–æ–ª—å–∫—É date_from/date_to –º–æ–≥—É—Ç –±—ã—Ç—å –∫–æ—Ä—Ç–µ–∂–µ–º
# –ú—ã –±—É–¥–µ–º –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞—Ç—å –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤–Ω—É—Ç—Ä–∏ –∫–Ω–æ–ø–æ–∫

# --- –§—É–Ω–∫—Ü–∏–∏: get_track, execute_report, get_result_rows, detect_region_crossings, create_departure_report ---

def get_track(sid, unit_id, day_from_ts, day_to_ts):
    """
    –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫ —é–Ω–∏—Ç–∞ —á–µ—Ä–µ–∑ messages/load_interval –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å.
    –í—Ä–µ–º—è –≤ UTC, –ø–æ—Ç–æ–º –ø—Ä–∏–≤–æ–¥–∏–º –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É (UTC+5).
    """
    r = requests.get(BASE_URL, params={
        "svc": "messages/load_interval",
        "params": json.dumps({
            "itemId": unit_id,
            "timeFrom": day_from_ts,
            "timeTo": day_to_ts,
            "flags": 0x1,
            "flagsMask": 0,
            "loadCount": 0xffffffff
        }),
        "sid": sid
    })
    js = r.json()
    points = []
    for m in js.get("messages", []):
        if m.get("pos"):
            t = m.get("t")
            try:
                if isinstance(t, str):
                    dt = datetime.datetime.strptime(t, "%Y-%m-%d %H:%M:%S")
                else:
                    dt = datetime.datetime.fromtimestamp(t)
                t_local = (dt + datetime.timedelta(hours=0)).strftime("%Y-%m-%d %H:%M:%S")
            except Exception:
                t_local = t
            points.append({
                "lat": m["pos"]["y"],
                "lon": m["pos"]["x"],
                "time": t_local,
                "spd": m.get("spd", 0)
            })
    return points

def execute_report(sid, res_id, tpl_id, unit_id, day_from_ts, day_to_ts):
    r = requests.get(BASE_URL, params={
        "svc": "report/exec_report",
        "params": json.dumps({
            "reportResourceId": res_id,
            "reportTemplateId": tpl_id,
            "reportObjectId": unit_id,
            "reportObjectSecId": 0,
            "interval": {"from": day_from_ts, "to": day_to_ts, "flags": 0}
        }),
        "sid": sid
    })
    return r.json()

def get_result_rows(sid, table_index, row_count):
    r = requests.get(BASE_URL, params={
        "svc": "report/get_result_rows",
        "params": json.dumps({
            "tableIndex": table_index,
            "indexFrom": 0,
            "indexTo": row_count
        }),
        "sid": sid
    })
    data = r.json()
    if isinstance(data, dict) and "rows" in data:
        return data["rows"]
    elif isinstance(data, list):
        return data
    else:
        return []

def detect_region_crossings(points, regions_geojson_path):
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º spatial join.
    –ï—Å–ª–∏ –≤ GeoDataFrame –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü "shapeName", –æ–Ω —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ "name".
    –ü—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∫ –Ω–µ–º—É –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç—Å—è +4.99 —á–∞—Å–æ–≤.
    """
    if not points:
        return []
    
    df = pd.DataFrame(points)
    try:
        df["datetime"] = pd.to_datetime(df["time"], format="%Y-%m-%d %H:%M:%S")
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        df["datetime"] = pd.to_datetime(df["time"], errors='coerce')
    
    df["geometry"] = df.apply(lambda row: Point(row["lon"], row["lat"]), axis=1)
    gdf_points = gpd.GeoDataFrame(df, geometry="geometry", crs="EPSG:4326")
    
    with open(regions_geojson_path, "r", encoding="utf-8") as f:
        regions_geojson = json.load(f)
    gdf_regions = gpd.GeoDataFrame.from_features(regions_geojson["features"])
    gdf_regions.crs = "EPSG:4326"
    
    if "shapeName" not in gdf_regions.columns:
        if "name" in gdf_regions.columns:
            gdf_regions["shapeName"] = gdf_regions["name"]
        else:
            gdf_regions["shapeName"] = ""
    
    gdf_joined = gpd.sjoin(
        gdf_points,
        gdf_regions[['geometry', 'shapeName']],
        how="left",
        predicate='within'
    )
    
    gdf_joined["region"] = gdf_joined["shapeName"]
    gdf_joined = gdf_joined.sort_values("datetime").reset_index(drop=True)
    gdf_joined["prev_region"] = gdf_joined["region"].shift()
    crossings = gdf_joined[gdf_joined["region"] != gdf_joined["prev_region"]].iloc[1:]
    if crossings.empty:
        return []
    
    crossings_list = list(crossings.apply(lambda row: {
        "from_region": row["prev_region"],
        "to_region": row["region"],
        "time": (row["datetime"] + datetime.timedelta(hours=4.99)).strftime("%Y-%m-%d %H:%M:%S"),
        "lat": row["lat"],
        "lon": row["lon"]
    }, axis=1))
    
    return crossings_list

def create_departure_report(unit_dict, units_to_process, SID, regions_geojson_path, responsible_regions, day_from_ts, day_to_ts):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏:
      ["–Æ–Ω–∏—Ç", "–î–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω", "–í—Ä–µ–º—è –≤—ã–µ–∑–¥–∞ —Å —Ä–µ–≥–∏–æ–Ω–∞", "–°—Ç–∞—Ç—É—Å",
       "–í–µ—Ä–Ω—É–ª—Å—è –≤ —Ä–µ–≥–∏–æ–Ω", "–í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ —Ä–µ–≥–∏–æ–Ω",
       "–ü–µ—Ä–≤—ã–π –∑–∞–µ–∑–¥ –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º"]
    –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å (day_from_ts .. day_to_ts).
    """
    results = []
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ GeoJSON –∏ —Å–æ–∑–¥–∞–Ω–∏–µ GeoDataFrame –¥–ª—è —Ä–µ–≥–∏–æ–Ω–æ–≤
    with open(regions_geojson_path, "r", encoding="utf-8") as f:
        regions_geojson = json.load(f)
    gdf_regions = gpd.GeoDataFrame.from_features(regions_geojson["features"])
    gdf_regions.crs = "EPSG:4326"
    if "shapeName" not in gdf_regions.columns:
        gdf_regions["shapeName"] = gdf_regions.get("name", "")
    
    progress_text = "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —é–Ω–∏—Ç–æ–≤..."
    my_bar = st.progress(0, text=progress_text)
    total_units = len(units_to_process)

    for i, unit_name in enumerate(units_to_process, start=1):
        unit_id = unit_dict[unit_name]
        track = get_track(SID, unit_id, day_from_ts, day_to_ts)

        if not track:
            results.append({
                "–Æ–Ω–∏—Ç": unit_name,
                "–î–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω": None,
                "–í—Ä–µ–º—è –≤—ã–µ–∑–¥–∞ —Å —Ä–µ–≥–∏–æ–Ω–∞": None,
                "–°—Ç–∞—Ç—É—Å": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç—Ä–µ–∫—É",
                "–í–µ—Ä–Ω—É–ª—Å—è –≤ —Ä–µ–≥–∏–æ–Ω": None,
                "–í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ —Ä–µ–≥–∏–æ–Ω": None,
                "–ü–µ—Ä–≤—ã–π –∑–∞–µ–∑–¥ –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã": "",
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç—Ä–µ–∫—É"
            })
            my_bar.progress(i / total_units, text=f"{unit_name} ‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            continue

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–µ
        df_first = pd.DataFrame([track[0]])
        df_first["geometry"] = df_first.apply(lambda row: Point(row["lon"], row["lat"]), axis=1)
        gdf_first = gpd.GeoDataFrame(df_first, geometry="geometry", crs="EPSG:4326")
        gdf_first_joined = gpd.sjoin(
            gdf_first,
            gdf_regions[['geometry', 'shapeName']],
            how="left",
            predicate="within"
        )
        home_region = gdf_first_joined.iloc[0]["shapeName"] if not gdf_first_joined.empty else None

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏
        crossings = detect_region_crossings(track, regions_geojson_path)
        departure_event = None
        return_time = None
        returned_home = None

        if crossings:
            for idx, event in enumerate(crossings):
                if event["from_region"] == home_region and not departure_event:
                    departure_event = event
                    break

            if departure_event:
                after_departure = crossings[idx + 1:]
                return_indices = [j for j, e in enumerate(after_departure) if e["to_region"] == home_region]
                if return_indices:
                    last_return_idx = return_indices[-1]
                    return_event = after_departure[last_return_idx]

                    after_return = after_departure[last_return_idx + 1:]
                    left_again = any(e["from_region"] == home_region for e in after_return)

                    if not left_again:
                        returned_home = True
                        return_time = return_event["time"]

        # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
        visited_regions = set(e["to_region"] for e in crossings if e["to_region"])
        responsible = set(responsible_regions.get(unit_name, [])) if responsible_regions else set()
        first_entry_times = {}
        for event in crossings:
            region = event["to_region"]
            if region in responsible and region not in first_entry_times:
                first_entry_times[region] = event["time"]

        entry_times_str = '\n'.join(f"{r}: {pd.to_datetime(t).strftime('%H:%M:%S')}"
                                    for r, t in first_entry_times.items())

        visited_resp = responsible & visited_regions
        not_visited_resp = responsible - visited_regions

        def format_regions(region_set):
            return ', '.join(sorted(str(r) for r in region_set if pd.notna(r))) 

        if not responsible:
            region_comment = "‚ùî –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤"
        elif not visited_resp:
            region_comment = "‚ùå –ù–∏ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω –Ω–µ –ø–æ—Å–µ—â—ë–Ω"
        elif not_visited_resp:
            region_comment = (
                f"‚úÖ –ü–æ—Å–µ—Ç–∏–ª: {format_regions(visited_resp)} | ‚ùå –ù–µ –ø–æ—Å–µ—Ç–∏–ª: {format_regions(not_visited_resp)}"
            )
        else:
            region_comment = f"‚úÖ –ü–æ—Å–µ—Ç–∏–ª –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã: {format_regions(visited_resp)}"

        results.append({
            "–Æ–Ω–∏—Ç": unit_name,
            "–î–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω": home_region,
            "–í—Ä–µ–º—è –≤—ã–µ–∑–¥–∞ —Å —Ä–µ–≥–∏–æ–Ω–∞": departure_event["time"] if departure_event else None,
            "–°—Ç–∞—Ç—É—Å": "–í—ã–µ—Ö–∞–ª" if departure_event else "–ï—â–µ –Ω–µ –≤—ã–µ—Ö–∞–ª",
            "–í–µ—Ä–Ω—É–ª—Å—è –≤ —Ä–µ–≥–∏–æ–Ω": returned_home if departure_event else None,
            "–í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ —Ä–µ–≥–∏–æ–Ω": return_time if returned_home else None,
            "–ü–µ—Ä–≤—ã–π –∑–∞–µ–∑–¥ –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã": entry_times_str,
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º": region_comment
        })

        my_bar.progress(i / total_units, text=f"{unit_name} ‚úÖ")

    my_bar.empty()
    return pd.DataFrame(results)

# --- –ß—Ç–µ–Ω–∏–µ GeoJSON –¥–ª—è –∫–∞—Ä—Ç—ã (—Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤) ---
with open(REGIONS_GEOJSON, "r", encoding="utf-8") as f:
    regions_geojson_str = json.dumps(json.load(f))
with open(CITIES_GEOJSON, "r", encoding="utf-8") as f:
    cities_geojson_str = json.dumps(json.load(f))

# ------------------ –ë–ª–æ–∫ 1: "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç—á—ë—Ç—ã –∏ –∫–∞—Ä—Ç—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤" ------------------
if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç—á—ë—Ç—ã –∏ –∫–∞—Ä—Ç—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤"):
    all_dates = pd.date_range(start=date_from, end=date_to, freq="D").to_pydatetime().tolist()

    for cur_date in all_dates:
        day_str = cur_date.strftime("%Y-%m-%d")
        st.markdown(f"## üìÖ –î–∞—Ç–∞: {day_str}")

        # –ó–¥–µ—Å—å –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
        day_from_ts = int(datetime.datetime.combine(cur_date.date(), datetime.time.min).timestamp())
        day_to_ts   = int(datetime.datetime.combine(cur_date.date(), datetime.time.max).timestamp())

        for unit_name in selected_units:
            st.markdown(f"### üöò –Æ–Ω–∏—Ç: {unit_name}")
            unit_id = unit_dict[unit_name]

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç –∏ —Ç—Ä–µ–∫ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
            report_result = execute_report(SID, res["id"], tpl_id, unit_id, day_from_ts, day_to_ts)
            detailed_points = get_track(SID, unit_id, day_from_ts, day_to_ts)

            # 1) –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏
            crossings = detect_region_crossings(detailed_points, REGIONS_GEOJSON)
            if crossings:
                st.subheader("‚õ≥ –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏")
                df_crossings = pd.DataFrame(crossings)
                df_crossings["–Æ–Ω–∏—Ç"] = unit_name
                st.dataframe(df_crossings, use_container_width=True)
            else:
                st.info("–ù–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.")

            # 2) –¢–∞–±–ª–∏—Ü—ã –æ—Ç—á—ë—Ç–∞ (unit_trips –∏ unit_trace)
            if "reportResult" in report_result:
                for table_index, table in enumerate(report_result["reportResult"]["tables"]):
                    if table["name"] not in ["unit_trips", "unit_trace"]:
                        continue
                    row_count = table["rows"]
                    headers = table["header"]
                    data = get_result_rows(SID, table_index, row_count)

                    parsed_rows = []
                    for row_obj in data:
                        line = []
                        for cell in row_obj["c"]:
                            if isinstance(cell, dict) and "t" in cell:
                                raw_val = cell["t"]
                            else:
                                raw_val = cell

                            if isinstance(raw_val, str) and re.match(r'^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$', raw_val):
                                try:
                                    dt = datetime.datetime.strptime(raw_val, "%Y-%m-%d %H:%M:%S") + datetime.timedelta(hours=5)
                                    val = dt.strftime("%Y-%m-%d %H:%M:%S")
                                except Exception:
                                    val = raw_val
                            elif isinstance(raw_val, (int, float)):
                                dt = datetime.datetime.fromtimestamp(raw_val) + datetime.timedelta(hours=5)
                                val = dt.strftime("%Y-%m-%d %H:%M:%S")
                            else:
                                val = raw_val
                            line.append(val)
                        parsed_rows.append(line)

                    df = pd.DataFrame(parsed_rows, columns=headers)
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ "–ù–∞—á–∞–ª–æ" –∏ "–ö–æ–Ω–µ—Ü" –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≤–∞—à–µ–º—É –∫–æ–¥—É
                    df["–ù–∞—á–∞–ª–æ"] = (
                        df
                        .apply(
                            lambda row: (
                                pd.to_datetime(str(row["–ù–∞—á–∞–ª–æ"]), format="%Y-%m-%d %H:%M:%S", errors="raise")
                            )
                            if re.match(r"^\d{4}-\d{2}-\d{2}", str(row["–ù–∞—á–∞–ª–æ"]))
                            else pd.to_datetime(
                                f"{row['Grouping']} {row['–ù–∞—á–∞–ª–æ']}",
                                format="%Y-%m-%d %H:%M:%S",
                                errors="coerce"
                            )
                            , axis=1
                        )
                        + pd.Timedelta(hours=5)
                    ).dt.strftime("%H:%M:%S")

                    df["–ö–æ–Ω–µ—Ü"] = (
                        df
                        .apply(
                            lambda row: (
                                pd.to_datetime(str(row["–ö–æ–Ω–µ—Ü"]), format="%Y-%m-%d %H:%M:%S", errors="raise")
                            )
                            if re.match(r"^\d{4}-\d{2}-\d{2}", str(row["–ö–æ–Ω–µ—Ü"]))
                            else pd.to_datetime(
                                f"{row['Grouping']} {row['–ö–æ–Ω–µ—Ü']}",
                                format="%Y-%m-%d %H:%M:%S",
                                errors="coerce"
                            )
                            , axis=1
                        )
                        + pd.Timedelta(hours=5)
                    ).dt.strftime("%H:%M:%S")

                    df.rename(columns={"Grouping": "–î–µ–Ω—å"}, inplace=True)
                    st.markdown(f"#### üìã –¢–∞–±–ª–∏—Ü–∞ '{table['name']}' –¥–ª—è {unit_name}")
                    st.dataframe(df, use_container_width=True)
            else:
                st.warning(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç—á—ë—Ç–µ –∑–∞ {day_str} –¥–ª—è {unit_name}")
                st.json(report_result)

            # 3) –ö–∞—Ä—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
            coords = [[p["lat"], p["lon"]] for p in detailed_points]
            last = coords[-1] if coords else None

            car_icon_url = "https://cdn-icons-png.flaticon.com/512/854/854866.png"
            coords_json = json.dumps(coords)
            last_point_json = json.dumps(last)
            map_html = f"""
            <div id="map_{day_str}_{unit_name}" style="height: 400px; margin-bottom: 30px;"></div>
            <script>
                var map = L.map('map_{day_str}_{unit_name}').setView([48.0, 68.0], 6);
                L.tileLayer('https://{{s}}.tile.openstreetmap.org/{{z}}/{{x}}/{{y}}.png').addTo(map);
                var coords = {coords_json};
                var last = {last_point_json};
                if (coords.length > 0) {{
                    var track = L.polyline(coords, {{color: 'red'}}).addTo(map);
                    map.fitBounds(track.getBounds());
                    if (last) {{
                        var carIcon = L.icon({{
                            iconUrl: "{car_icon_url}",
                            iconSize: [32, 32],
                            iconAnchor: [16, 16]
                        }});
                        L.marker([last[0], last[1]], {{icon: carIcon}}).addTo(map)
                            .bindPopup("üöó –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–∫–∞");
                    }}
                }}
                var regionsLayer = L.geoJSON({regions_geojson_str}, {{
                    style: function(feature) {{
                        return {{ color: 'black', weight: 1, fillOpacity: 0 }};
                    }},
                    onEachFeature: function(feature, layer) {{
                        if (feature.properties) {{
                            var regionName = feature.properties.shapeName || feature.properties.name;
                            if (regionName) {{
                                layer.bindTooltip(regionName, {{
                                    permanent: true,
                                    direction: 'center',
                                    className: 'region-label'
                                }});
                            }}
                        }}
                    }}
                }});
                
                var citiesLayer = L.geoJSON({cities_geojson_str}, {{
                    pointToLayer: function(feature, latlng) {{
                        var marker = L.marker(latlng);
                        if (feature.properties && feature.properties.name) {{
                            marker.bindPopup(feature.properties.name);
                        }}
                        return marker;
                    }}
                }});
                var cityCluster = L.markerClusterGroup();
                cityCluster.addLayer(citiesLayer);
                var overlays = {{
                    "–ì—Ä–∞–Ω–∏—Ü—ã —Ä–µ–≥–∏–æ–Ω–æ–≤": regionsLayer,
                    "–ü—É–Ω–∫—Ç—ã –Ω–∞—Å–µ–ª–µ–Ω–∏—è": cityCluster
                }};
                L.control.layers(null, overlays, {{collapsed: false}}).addTo(map);
                regionsLayer.addTo(map);
                cityCluster.addTo(map);
            </script>
            <style>
                .region-label {{
                    background-color: rgba(255, 255, 255, 0.7);
                    border: none;
                    font-size: 12px;
                    padding: 2px;
                }}
                .city-label {{
                    background-color: rgba(255, 255, 255, 0.7);
                    border: none;
                    font-size: 10px;
                    padding: 2px;
                }}
            </style>
            """
            st.components.v1.html(f"""
            <html>
            <head>
                <link
                  rel="stylesheet"
                  href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
                />
                <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
                <script src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"></script>
            </head>
            <body>{map_html}</body></html>
            """, height=420)

    st.success("‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –∏ –∫–∞—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

# ------------------ –ë–ª–æ–∫ 2: "üì§ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ –≤—ã–µ–∑–¥—É –∏–∑ –¥–æ–º–∞—à–Ω–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞" ------------------
if st.button("üì§ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ –≤—ã–µ–∑–¥—É –∏–∑ –¥–æ–º–∞—à–Ω–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ (–î–ª—è –≤—Å–µ—Ö) (Excel + —Ç–∞–±–ª–∏—Ü—ã)"):
    # –°–Ω–∞—á–∞–ª–∞ —á–∏—Ç–∞–µ–º CSV —Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ä–µ–≥–∏–æ–Ω–∞–º–∏
    df = pd.read_csv("manager_region.csv")
    responsible_regions = (
        df.groupby("Car_numb")["Region_mapped"]
        .apply(lambda x: list(set(x)))
        .to_dict()
    )

    all_dates = pd.date_range(start=date_from, end=date_to, freq="D").to_pydatetime().tolist()

    # –ì–æ—Ç–æ–≤–∏–º –æ–¥–∏–Ω Excel —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏ (–ø–æ –¥–≤–∞ –ª–∏—Å—Ç–∞ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        for cur_date in all_dates:
            day_str = cur_date.strftime("%Y-%m-%d")
            # –ú–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞/–∫–æ–Ω—Ü–∞ –¥–Ω—è
            day_from_ts = int(datetime.datetime.combine(cur_date.date(), datetime.time.min).timestamp())
            day_to_ts   = int(datetime.datetime.combine(cur_date.date(), datetime.time.max).timestamp())

            # –ü–æ–ª—É—á–∞–µ–º DataFrame –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
            report_df = create_departure_report(
                unit_dict, list(unit_dict.keys()),
                SID, REGIONS_GEOJSON, responsible_regions,
                day_from_ts, day_to_ts
            )

            not_departed_df = report_df[report_df["–°—Ç–∞—Ç—É—Å"] == "–ï—â–µ –Ω–µ –≤—ã–µ—Ö–∞–ª"]
            departed_df     = report_df[report_df["–°—Ç–∞—Ç—É—Å"] == "–í—ã–µ—Ö–∞–ª"]

            # –ó–∞–ø–∏—à–µ–º –Ω–∞ –¥–≤–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–∞:
            sheet_not = f"{day_str}_–ù–µ–í—ã–µ—Ö–∞–ª"
            sheet_dep = f"{day_str}_–í—ã–µ—Ö–∞–ª"

            not_departed_df.to_excel(writer, sheet_name=sheet_not, index=False)
            departed_df.to_excel(writer,     sheet_name=sheet_dep, index=False)

    excel_data = output.getvalue()

    # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞, –æ–¥–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ ‚Äî –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å Excel-–æ—Ç—á–µ—Ç (–ø–æ –≤—Å–µ–º –¥–Ω—è–º —Å—Ä–∞–∑—É)",
        data=excel_data,
        file_name=f"departure_report_{date_from}_{date_to}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    st.success("‚úÖ –ï–¥–∏–Ω—ã–π Excel-–æ—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ.")
