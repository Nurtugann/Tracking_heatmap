import streamlit as st
import requests
import json
import datetime
import pandas as pd
import geopandas as gpd
from shapely.geometry import Point
import re
import io

st.cache_data.clear()
st.set_page_config(layout="wide")
st.title("üöó –ö–∞—Ä—Ç–∞ —Ç—Ä–µ–∫–∞ + üìä –û—Ç—á—ë—Ç—ã + üó∫Ô∏è –ü–µ—Ä–µ—Ö–æ–¥—ã —Ä–µ–≥–∏–æ–Ω–æ–≤ (–ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —é–Ω–∏—Ç–∞–º)")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = "c611c2bab48335e36a4b59be460c57d2DC99601D0C49777B24DFE07B7614A2826A62C393"
BASE_URL = "https://hst-api.wialon.host/wialon/ajax.html"

@st.cache_data
def login(token):
    r = requests.get(
        BASE_URL,
        params={
            "svc": "token/login",
            "params": json.dumps({"token": token})
        }
    )
    return r.json().get("eid")

@st.cache_data
def get_items(sid, item_type, flags):
    r = requests.get(
        BASE_URL,
        params={
            "svc": "core/search_items",
            "params": json.dumps({
                "spec": {
                    "itemsType": item_type,
                    "propName": "sys_name",
                    "propValueMask": "*",
                    "sortType": "sys_name"
                },
                "force": 1,
                "flags": flags,
                "from": 0,
                "to": 0
            }),
            "sid": sid
        }
    )
    return r.json().get("items", [])

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —é–Ω–∏—Ç–æ–≤/—Ä–µ—Å—É—Ä—Å–æ–≤
SID = login(TOKEN)
units = get_items(SID, "avl_unit", 1)
resources = get_items(SID, "avl_resource", 8193)

if not resources or not units:
    st.error("–ù–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–ª–∏ —é–Ω–∏—Ç–æ–≤.")
    st.stop()

unit_dict = {u["nm"]: u["id"] for u in units}
# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –≤—ã–±–∏—Ä–∞–µ–º –Ω–∏ –æ–¥–∏–Ω —é–Ω–∏—Ç, –ø—É—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–µ—Ä–µ—Ç –≤—Ä—É—á–Ω—É—é
selected_units = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —é–Ω–∏—Ç—ã:", list(unit_dict))
if not selected_units:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —é–Ω–∏—Ç.")
    st.stop()

res = resources[0]
tpl_id = list(res["rep"].values())[0]["id"]

today = datetime.date.today()
selected_date = st.date_input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å", today)
date_from = date_to = selected_date

from_ts = int(datetime.datetime.combine(date_from, datetime.time.min).timestamp())
to_ts = int(datetime.datetime.combine(date_to, datetime.time.max).timestamp())

def get_track(sid, unit_id):
    """
    –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫ —é–Ω–∏—Ç–∞ —á–µ—Ä–µ–∑ messages/load_interval.
    –ó–¥–µ—Å—å –ø—Ä–∏–±–∞–≤–ª—è–µ–º +5 —á–∞—Å–æ–≤ –∫ –∑–Ω–∞—á–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ (UTC -> –º–µ—Å—Ç–Ω–æ–µ)
    ‚Äì —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏.
    """
    r = requests.get(BASE_URL, params={
        "svc": "messages/load_interval",
        "params": json.dumps({
            "itemId": unit_id,
            "timeFrom": from_ts,
            "timeTo": to_ts,
            "flags": 0x1,
            "flagsMask": 0,
            "loadCount": 0xffffffff
        }),
        "sid": sid
    })
    js = r.json()
    points = []
    for m in js.get("messages", []):
        if m.get("pos"):
            t = m.get("t")
            try:
                # –ü—Ä–∏–±–∞–≤–ª—è–µ–º +5 —á–∞—Å–æ–≤ –∫ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏–π
                if isinstance(t, str):
                    dt = datetime.datetime.strptime(t, "%Y-%m-%d %H:%M:%S")
                else:
                    dt = datetime.datetime.fromtimestamp(t)
                # –ó–¥–µ—Å—å —Å–º–µ—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (—Å–µ–π—á–∞—Å +0, –µ—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ)
                t_local = (dt + datetime.timedelta(hours=0)).strftime("%Y-%m-%d %H:%M:%S")
            except Exception:
                t_local = t
            points.append({
                "lat": m["pos"]["y"],
                "lon": m["pos"]["x"],
                "time": t_local,  # —É–∂–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (UTC+5)
                "spd": m.get("spd", 0)
            })
    return points

def execute_report(sid, res_id, tpl_id, unit_id):
    r = requests.get(BASE_URL, params={
        "svc": "report/exec_report",
        "params": json.dumps({
            "reportResourceId": res_id,
            "reportTemplateId": tpl_id,
            "reportObjectId": unit_id,
            "reportObjectSecId": 0,
            "interval": {"from": from_ts, "to": to_ts, "flags": 0}
        }),
        "sid": sid
    })
    return r.json()

def get_result_rows(sid, table_index, row_count):
    r = requests.get(BASE_URL, params={
        "svc": "report/get_result_rows",
        "params": json.dumps({
            "tableIndex": table_index,
            "indexFrom": 0,
            "indexTo": row_count
        }),
        "sid": sid
    })
    data = r.json()
    if isinstance(data, dict) and "rows" in data:
        return data["rows"]
    elif isinstance(data, list):
        return data
    else:
        return []

def detect_region_crossings(points, regions_geojson_path):
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º spatial join.
    –ï—Å–ª–∏ –≤ GeoDataFrame —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü "shapeName", –æ–Ω —Å–æ–∑–¥–∞—ë—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–æ–ª–±—Ü–∞ "name".
    """
    if not points:
        return []
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ datetime
    df = pd.DataFrame(points)
    try:
        df["datetime"] = pd.to_datetime(df["time"], format="%Y-%m-%d %H:%M:%S")
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        df["datetime"] = pd.to_datetime(df["time"], errors='coerce')
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –¥–ª—è —Ç–æ—á–µ–∫ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º GeoDataFrame
    df["geometry"] = df.apply(lambda row: Point(row["lon"], row["lat"]), axis=1)
    gdf_points = gpd.GeoDataFrame(df, geometry="geometry", crs="EPSG:4326")
    
    # –ß–∏—Ç–∞–µ–º GeoJSON —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏
    with open(regions_geojson_path, "r", encoding="utf-8") as f:
        regions_geojson = json.load(f)
    gdf_regions = gpd.GeoDataFrame.from_features(regions_geojson["features"])
    gdf_regions.crs = "EPSG:4326"
    
    # –ï—Å–ª–∏ —Å—Ç–æ–ª–±—Ü–∞ "shapeName" –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ "name" (–µ—Å–ª–∏ "name" –∏–º–µ–µ—Ç—Å—è)
    if "shapeName" not in gdf_regions.columns:
        if "name" in gdf_regions.columns:
            gdf_regions["shapeName"] = gdf_regions["name"]
        else:
            gdf_regions["shapeName"] = ""
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ (spatial join) –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–µ–∫ —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏.
    gdf_joined = gpd.sjoin(
        gdf_points,
        gdf_regions[['geometry', 'shapeName']],
        how="left",
        predicate='within'
    )
    
    # –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –±–µ—Ä–µ–º –∏–∑ "shapeName"
    gdf_joined["region"] = gdf_joined["shapeName"]
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
    gdf_joined = gdf_joined.sort_values("datetime").reset_index(drop=True)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–º–µ–Ω—É —Ä–µ–≥–∏–æ–Ω–∞ —á–µ—Ä–µ–∑ —Å–¥–≤–∏–≥ (shift)
    gdf_joined["prev_region"] = gdf_joined["region"].shift()
    # –ò—Å–∫–ª—é—á–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å, –≥–¥–µ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
    crossings = gdf_joined[gdf_joined["region"] != gdf_joined["prev_region"]].iloc[1:]
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    if crossings.empty:
        return []
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö
    crossings_list = list(crossings.apply(lambda row: {
        "from_region": row["prev_region"],
        "to_region": row["region"],
        "time": (row["datetime"] + datetime.timedelta(hours=4.99)).strftime("%Y-%m-%d %H:%M:%S"),
        "lat": row["lat"],
        "lon": row["lon"]
    }, axis=1))
    
    return crossings_list

# –ß—Ç–µ–Ω–∏–µ GeoJSON –¥–ª—è —Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ –ø—É–Ω–∫—Ç–æ–≤ –Ω–∞—Å–µ–ª–µ–Ω–∏—è
with open("OSMB-f1ec2d0019a5c0c4984f489cdc13d5d26a7949fd.geojson", "r", encoding="utf-8") as f:
    regions_geojson_str = json.dumps(json.load(f))
with open("hotosm_kaz_populated_places_points_geojson.geojson", "r", encoding="utf-8") as f:
    cities_geojson_str = json.dumps(json.load(f))

if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç—á—ë—Ç—ã –∏ –∫–∞—Ä—Ç—É"):
    # –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º index.html (Wialon-—Ä–µ–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ JS) ‚Äì —Ç–∞–º —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å +5 —á–µ—Ä–µ–∑ adjustTime
    unit_ids = [unit_dict[name] for name in selected_units]
    units_json = json.dumps(unit_ids)
    with open("index.html", "r", encoding="utf-8") as f:
        html = f.read()
    injected_js = f"""
    <script>
    window.preselectedUnits = {units_json};
    </script>
    """
    st.markdown("üîΩ –ù–∏–∂–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è Wialon-—Ä–µ–ø–æ—Ä—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤:")
    st.components.v1.html(html + injected_js, height=800, scrolling=True)

    for unit_name in selected_units:
        st.markdown(f"## üöò –Æ–Ω–∏—Ç: {unit_name}")
        unit_id = unit_dict[unit_name]

        report_result = execute_report(SID, res["id"], tpl_id, unit_id)
        detailed_points = get_track(SID, unit_id)
        coords = [[p["lat"], p["lon"]] for p in detailed_points]
        last = coords[-1] if coords else None

        # –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ ‚Äì –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç +5 —á–∞—Å–æ–≤ (–∏–∑ get_track)
        crossings = detect_region_crossings(detailed_points, "OSMB-f1ec2d0019a5c0c4984f489cdc13d5d26a7949fd.geojson")
        if crossings:
            st.subheader("‚õ≥ –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏")
            st.dataframe(pd.DataFrame(crossings))

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—á—ë—Ç–∞ (–¥–ª—è —Ç–∞–±–ª–∏—Ü unit_trips –∏ unit_trace)
        if "reportResult" in report_result:
            for table_index, table in enumerate(report_result["reportResult"]["tables"]):
                if table["name"] not in ["unit_trips", "unit_trace"]:
                    continue
                row_count = table["rows"]
                headers = table["header"]
                data = get_result_rows(SID, table_index, row_count)
                rows = data  # data —É–∂–µ —Å–ø–∏—Å–æ–∫

                parsed_rows = []
                for row_obj in rows:
                    line = []
                    for cell in row_obj["c"]:
                        # –î–ª—è –æ—Ç—á—ë—Ç–æ–≤ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –∏–∑ –æ—Ç—á—ë—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ UTC,
                        # –∏ –∑–¥–µ—Å—å –ø—Ä–∏–±–∞–≤–ª—è–µ–º +5 —á–∞—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
                        if isinstance(cell, dict) and "t" in cell:
                            raw_val = cell["t"]
                        else:
                            raw_val = cell
                        if isinstance(raw_val, str) and re.match(r'^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$', raw_val):
                            try:
                                dt = datetime.datetime.strptime(raw_val, "%Y-%m-%d %H:%M:%S") + datetime.timedelta(hours=5)
                                val = dt.strftime("%Y-%m-%d %H:%M:%S")
                            except Exception:
                                val = raw_val
                        elif isinstance(raw_val, (int, float)):
                            dt = datetime.datetime.fromtimestamp(raw_val) + datetime.timedelta(hours=5)
                            val = dt.strftime("%Y-%m-%d %H:%M:%S")
                        else:
                            val = raw_val
                        line.append(val)
                    parsed_rows.append(line)

                df = pd.DataFrame(parsed_rows, columns=headers)
                # –ï—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –æ—Ç–¥–µ–ª—å–Ω–æ –∑–∞–¥–∞–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ "Grouping", "–ù–∞—á–∞–ª–æ" –∏ "–ö–æ–Ω–µ—Ü", –æ–±—ä–µ–¥–∏–Ω—è–µ–º "Grouping" (–¥–µ–Ω—å)
                # —Å "–ù–∞—á–∞–ª–æ" –∏ "–ö–æ–Ω–µ—Ü", —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å—É—Ç–æ–∫.
                df["–ù–∞—á–∞–ª–æ"] = pd.to_datetime(df["Grouping"].astype(str) + " " + df["–ù–∞—á–∞–ª–æ"].astype(str),
                                              format="%Y-%m-%d %H:%M:%S") + pd.Timedelta(hours=5)
                df["–ö–æ–Ω–µ—Ü"] = pd.to_datetime(df["Grouping"].astype(str) + " " + df["–ö–æ–Ω–µ—Ü"].astype(str),
                                              format="%Y-%m-%d %H:%M:%S") + pd.Timedelta(hours=5)
                # –û—Å—Ç–∞–≤–ª—è–µ–º –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ (–±–µ–∑ –¥–∞—Ç—ã)
                df["–ù–∞—á–∞–ª–æ"] = df["–ù–∞—á–∞–ª–æ"].dt.strftime("%H:%M:%S")
                df["–ö–æ–Ω–µ—Ü"] = df["–ö–æ–Ω–µ—Ü"].dt.strftime("%H:%M:%S")
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü "Grouping" –≤ "–î–µ–Ω—å"
                df.rename(columns={"Grouping": "–î–µ–Ω—å"}, inplace=True)
                st.markdown(f"### üìã –¢–∞–±–ª–∏—Ü–∞ –ø–æ–µ–∑–¥–æ–∫ (–∏–ª–∏ trace) –¥–ª—è {unit_name}")
                st.dataframe(df, use_container_width=True)
        else:
            st.warning("‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç—á—ë—Ç–µ")
            st.json(report_result)

        # --- –ö–∞—Ä—Ç–∞ —Å —É–ø—Ä–∞–≤–ª—è–µ–º—ã–º–∏ —Å–ª–æ—è–º–∏ ---
        car_icon_url = "https://cdn-icons-png.flaticon.com/512/854/854866.png"
        coords_json = json.dumps(coords)
        last_point_json = json.dumps(last)
        map_html = f"""
        <div id="map_{unit_name}" style="height: 600px;"></div>
        <script>
            var map = L.map('map_{unit_name}').setView([48.0, 68.0], 6);
            L.tileLayer('https://{{s}}.tile.openstreetmap.org/{{z}}/{{x}}/{{y}}.png').addTo(map);
            var coords = {coords_json};
            var last = {last_point_json};
            if (coords.length > 0) {{
                var track = L.polyline(coords, {{color: 'red'}}).addTo(map);
                map.fitBounds(track.getBounds());
                if (last) {{
                    var carIcon = L.icon({{
                        iconUrl: "{car_icon_url}",
                        iconSize: [32, 32],
                        iconAnchor: [16, 16]
                    }});
                    L.marker([last[0], last[1]], {{icon: carIcon}}).addTo(map)
                        .bindPopup("üöó –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–∫–∞");
                }}
            }}

            // –°–ª–æ–π –≥—Ä–∞–Ω–∏—Ü —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å –ø–æ–¥–ø–∏—Å—å—é
            var regionsLayer = L.geoJSON({regions_geojson_str}, {{
                style: function(feature) {{
                    return {{ color: 'black', weight: 1, fillOpacity: 0 }};
                }},
                onEachFeature: function(feature, layer) {{
                    if (feature.properties) {{
                        var regionName = feature.properties.shapeName || feature.properties.name;
                        if (regionName) {{
                            layer.bindTooltip(regionName, {{
                                permanent: true,
                                direction: 'center',
                                className: 'region-label'
                            }});
                        }}
                    }}
                }}
            }});
            // –°–ª–æ–π –ø—É–Ω–∫—Ç–æ–≤ –Ω–∞—Å–µ–ª–µ–Ω–∏—è
            var citiesLayer = L.geoJSON({cities_geojson_str}, {{
                pointToLayer: function(feature, latlng) {{
                    var marker = L.marker(latlng);
                    if (feature.properties && feature.properties.name) {{
                        marker.bindPopup(feature.properties.name);
                    }}
                    return marker;
                }}
            }});
            var cityCluster = L.markerClusterGroup();
            cityCluster.addLayer(citiesLayer);
            var overlays = {{
                "–ì—Ä–∞–Ω–∏—Ü—ã —Ä–µ–≥–∏–æ–Ω–æ–≤": regionsLayer,
                "–ü—É–Ω–∫—Ç—ã –Ω–∞—Å–µ–ª–µ–Ω–∏—è": cityCluster
            }};
            L.control.layers(null, overlays, {{collapsed: false}}).addTo(map);
            regionsLayer.addTo(map);
            cityCluster.addTo(map);
        </script>
        <style>
            .region-label {{
                background-color: rgba(255, 255, 255, 0.7);
                border: none;
                font-size: 12px;
                padding: 2px;
            }}
            .city-label {{
                background-color: rgba(255, 255, 255, 0.7);
                border: none;
                font-size: 10px;
                padding: 2px;
            }}
        </style>
        """
        st.components.v1.html(f"""
        <html>
        <head>
            <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"/>
            <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
            <script src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"></script>
        </head>
        <body>{map_html}</body></html>
        """, height=800)


# -----------------------
# –ù–æ–≤—ã–π –±–ª–æ–∫: –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –¥–ª—è –í–°–ï–• —é–Ω–∏—Ç–æ–≤ (–±–µ–∑ –∫–∞—Ä—Ç—ã)
if st.button("–í—ã–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö —é–Ω–∏—Ç–æ–≤ (Excel)"):
    all_crossings_all_units = []
    for unit_name, unit_id in unit_dict.items():
        st.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —é–Ω–∏—Ç–∞: {unit_name}...")
        detailed_points = get_track(SID, unit_id)
        crossings = detect_region_crossings(detailed_points, "OSMB-f1ec2d0019a5c0c4984f489cdc13d5d26a7949fd.geojson")
        if crossings:
            df_crossings = pd.DataFrame(crossings)
            df_crossings["unit"] = unit_name
            all_crossings_all_units.append(df_crossings)
    if all_crossings_all_units:
        df_all_crossings = pd.concat(all_crossings_all_units, ignore_index=True)
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine="openpyxl") as writer:
            df_all_crossings.to_excel(writer, sheet_name="Region Crossings", index=False)
        excel_data = output.getvalue()
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å Excel –¥–ª—è –≤—Å–µ—Ö —é–Ω–∏—Ç–æ–≤",
            data=excel_data,
            file_name="all_units_region_crossings.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    else:
        st.warning("–ü–µ—Ä–µ—Ö–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —é–Ω–∏—Ç–∞.")
