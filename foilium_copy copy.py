import streamlit as st

# –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∏—Ç—å –∫–µ—à, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç –æ—à–∏–±–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–º
try:
    st.cache_data.clear()
except Exception:
    pass

import requests
import json
import datetime
import pandas as pd
import geopandas as gpd
from shapely.geometry import Point
import re
import io

st.set_page_config(layout="wide")
st.title("üöó –ö–∞—Ä—Ç–∞ —Ç—Ä–µ–∫–∞ + üìä –û—Ç—á—ë—Ç—ã + üó∫Ô∏è –ü–µ—Ä–µ—Ö–æ–¥—ã —Ä–µ–≥–∏–æ–Ω–æ–≤ (–ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —é–Ω–∏—Ç–∞–º)")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
TOKEN = "c611c2bab48335e36a4b59be460c57d2BF8416B73C4A65F2B8A88A5848E97CD4471F14C6"
BASE_URL = "https://hst-api.wialon.host/wialon/ajax.html"
REGIONS_GEOJSON = "OSMB-f1ec2d0019a5c0c4984f489cdc13d5d26a7949fd.geojson"
CITIES_GEOJSON = "hotosm_kaz_populated_places_points_geojson.geojson"

def login(token):
    r = requests.get(
        BASE_URL,
        params={
            "svc": "token/login",
            "params": json.dumps({"token": token})
        }
    )
    return r.json().get("eid")

def get_items(sid, item_type, flags):
    r = requests.get(
        BASE_URL,
        params={
            "svc": "core/search_items",
            "params": json.dumps({
                "spec": {
                    "itemsType": item_type,
                    "propName": "sys_name",
                    "propValueMask": "*",
                    "sortType": "sys_name"
                },
                "force": 1,
                "flags": flags,
                "from": 0,
                "to": 0
            }),
            "sid": sid
        }
    )
    return r.json().get("items", [])

# --- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —é–Ω–∏—Ç–æ–≤/—Ä–µ—Å—É—Ä—Å–æ–≤ ---
SID = login(TOKEN)
units = get_items(SID, "avl_unit", 1)
resources = get_items(SID, "avl_resource", 8193)
if not resources or not units:
    st.error("–ù–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ –∏–ª–∏ —é–Ω–∏—Ç–æ–≤.")
    st.stop()

unit_dict = {u["nm"]: u["id"] for u in units}
selected_units = st.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —é–Ω–∏—Ç—ã (–¥–ª—è –æ—Ç—á—ë—Ç–æ–≤ –∏ –∫–∞—Ä—Ç—ã):", list(unit_dict))
if not selected_units:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —é–Ω–∏—Ç.")
    st.stop()

res = resources[0]
tpl_id = list(res["rep"].values())[0]["id"]

# --- –ë–ª–æ–∫ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –≤–º–µ—Å—Ç–æ –æ–¥–Ω–æ–≥–æ –¥–Ω—è ---
today = datetime.date.today()
selected_dates = st.date_input(
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç",
    value=(today, today),
    help="–î–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞: –∫–ª–∏–∫–Ω–∏—Ç–µ –¥–∞—Ç—É, –∑–∞—Ç–µ–º —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ Shift –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é –¥–∞—Ç—É"
)

if isinstance(selected_dates, tuple) and len(selected_dates) == 2:
    date_from, date_to = selected_dates
else:
    date_from = date_to = selected_dates

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –∏ GIS ---

def get_track(sid, unit_id, day_from_ts, day_to_ts):
    """
    –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫ —é–Ω–∏—Ç–∞ —á–µ—Ä–µ–∑ messages/load_interval –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å.
    –í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ UTC; –∫–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ –¥–µ–ª–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞ (+5 —á–∞—Å–æ–≤).
    """
    r = requests.get(BASE_URL, params={
        "svc": "messages/load_interval",
        "params": json.dumps({
            "itemId": unit_id,
            "timeFrom": day_from_ts,
            "timeTo": day_to_ts,
            "flags": 0x1,
            "flagsMask": 0,
            "loadCount": 0xffffffff
        }),
        "sid": sid
    })
    js = r.json()
    points = []
    for m in js.get("messages", []):
        if m.get("pos"):
            t = m.get("t")
            try:
                if isinstance(t, str):
                    dt = datetime.datetime.strptime(t, "%Y-%m-%d %H:%M:%S")
                else:
                    dt = datetime.datetime.fromtimestamp(t)
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º UTC-–º–µ—Ç–∫—É, –±–µ–∑ —Å–º–µ—â–µ–Ω–∏—è
                utc_str = dt.strftime("%Y-%m-%d %H:%M:%S")
            except Exception:
                utc_str = t
            points.append({
                "lat": m["pos"]["y"],
                "lon": m["pos"]["x"],
                "time": utc_str,
                "spd": m.get("spd", 0)
            })
    return points

def execute_report(sid, res_id, tpl_id, unit_id, day_from_ts, day_to_ts):
    r = requests.get(BASE_URL, params={
        "svc": "report/exec_report",
        "params": json.dumps({
            "reportResourceId": res_id,
            "reportTemplateId": tpl_id,
            "reportObjectId": unit_id,
            "reportObjectSecId": 0,
            "interval": {"from": day_from_ts, "to": day_to_ts, "flags": 0}
        }),
        "sid": sid
    })
    return r.json()

def get_result_rows(sid, table_index, row_count):
    r = requests.get(BASE_URL, params={
        "svc": "report/get_result_rows",
        "params": json.dumps({
            "tableIndex": table_index,
            "indexFrom": 0,
            "indexTo": row_count
        }),
        "sid": sid
    })
    data = r.json()
    if isinstance(data, dict) and "rows" in data:
        return data["rows"]
    elif isinstance(data, list):
        return data
    else:
        return []

def detect_region_crossings(points, regions_geojson_path):
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º spatial join.
    –í—Ä–µ–º—è –æ—Å—Ç–∞—ë—Ç—Å—è –≤ UTC, –±–µ–∑ –ø—Ä–∏–±–∞–≤–ª–µ–Ω–∏—è +5 —á–∞—Å–æ–≤. 
    –ë—É–¥–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞.
    """
    if not points:
        return []
    
    df = pd.DataFrame(points)
    try:
        df["datetime"] = pd.to_datetime(df["time"], format="%Y-%m-%d %H:%M:%S")
    except Exception as e:
        st.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        df["datetime"] = pd.to_datetime(df["time"], errors='coerce')
    
    df["geometry"] = df.apply(lambda row: Point(row["lon"], row["lat"]), axis=1)
    gdf_points = gpd.GeoDataFrame(df, geometry="geometry", crs="EPSG:4326")
    
    with open(regions_geojson_path, "r", encoding="utf-8") as f:
        regions_geojson = json.load(f)
    gdf_regions = gpd.GeoDataFrame.from_features(regions_geojson["features"])
    gdf_regions.crs = "EPSG:4326"
    
    if "shapeName" not in gdf_regions.columns:
        if "name" in gdf_regions.columns:
            gdf_regions["shapeName"] = gdf_regions["name"]
        else:
            gdf_regions["shapeName"] = ""
    
    gdf_joined = gpd.sjoin(
        gdf_points,
        gdf_regions[['geometry', 'shapeName']],
        how="left",
        predicate='within'
    )
    
    gdf_joined["region"] = gdf_joined["shapeName"]
    gdf_joined = gdf_joined.sort_values("datetime").reset_index(drop=True)
    gdf_joined["prev_region"] = gdf_joined["region"].shift()
    crossings = gdf_joined[gdf_joined["region"] != gdf_joined["prev_region"]].iloc[1:]
    if crossings.empty:
        return []
    
    crossings_list = list(crossings.apply(lambda row: {
        "from_region": row["prev_region"],
        "to_region": row["region"],
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º UTC-–≤—Ä–µ–º—è –±–µ–∑ —Å–º–µ—â–µ–Ω–∏—è
        "time": row["datetime"].strftime("%Y-%m-%d %H:%M:%S"),
        "lat": row["lat"],
        "lon": row["lon"]
    }, axis=1))
    
    return crossings_list

def compute_time_in_responsible_regions(crossings, start_of_day_ts, last_message_ts, responsible_set, initial_region):
    """
    –ü–æ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π crossings (UTC-–≤—Ä–µ–º—è) –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ {region: total_seconds},
    –≥–¥–µ region –±–µ—Ä—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ responsible_set.
    –£—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏–¥—ë—Ç –¥–æ last_message_ts (UTC), –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞ —Å—É—Ç–æ–∫.
    
    –ï—Å–ª–∏ initial_region ‚àà responsible_set, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —é–Ω–∏—Ç "–≤–æ—à—ë–ª" –≤ –Ω–µ–≥–æ –≤ start_of_day_ts.
    –ö–∞–∂–¥–æ–µ crossing —Å to_region=R —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –≤—Ö–æ–¥ –≤ R (UTC), —Å from_region=R —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –≤—ã—Ö–æ–¥ (UTC).
    –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö crossings —é–Ω–∏—Ç –≤—Å—ë –µ—â—ë –≤–Ω—É—Ç—Ä–∏ R, –¥–æ–±–∞–≤–ª—è–µ–º (last_message_ts - –≤—Ä–µ–º—è –≤—Ö–æ–¥–∞).
    """
    entry_ts_map = {r: None for r in responsible_set}
    durations = {r: 0 for r in responsible_set}
    
    # –ï—Å–ª–∏ –≤ 00:00 UTC —é–Ω–∏—Ç —É–∂–µ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ, –∏ —ç—Ç–æ—Ç —Ä–µ–≥–∏–æ–Ω ‚Äî –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π,
    # —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–Ω "–≤–æ—à—ë–ª" –≤ –Ω–µ–≥–æ —Ä–æ–≤–Ω–æ –≤ start_of_day_ts.
    if initial_region in responsible_set:
        entry_ts_map[initial_region] = start_of_day_ts
    
    for ev in crossings:
        t_e = int(datetime.datetime.strptime(ev["time"], "%Y-%m-%d %H:%M:%S").timestamp())
        if t_e < start_of_day_ts or t_e > last_message_ts:
            continue
        
        r_to = ev["to_region"]
        r_from = ev["from_region"]
        
        # –ó–∞–µ–∑–¥ –≤ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω r_to
        if r_to in responsible_set and entry_ts_map[r_to] is None:
            entry_ts_map[r_to] = t_e
        
        # –í—ã–µ–∑–¥ –∏–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ r_from
        if r_from in responsible_set and entry_ts_map[r_from] is not None:
            exit_ts = t_e
            durations[r_from] += (exit_ts - entry_ts_map[r_from])
            entry_ts_map[r_from] = None
    
    # –ü–æ—Å–ª–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π: –µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∫–æ–≥–æ-—Ç–æ r entry_ts_map[r] != None,
    # –∑–Ω–∞—á–∏—Ç —é–Ω–∏—Ç –æ—Å—Ç–∞–ª—Å—è –≤ r –¥–æ last_message_ts
    for r in responsible_set:
        if entry_ts_map[r] is not None:
            durations[r] += (last_message_ts - entry_ts_map[r])
            entry_ts_map[r] = None
    
    return durations

def create_departure_report(unit_dict, units_to_process, SID, regions_geojson_path, responsible_regions, day_from_ts, day_to_ts):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏:
      ["–Æ–Ω–∏—Ç", "–î–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω", "–í—Ä–µ–º—è –≤—ã–µ–∑–¥–∞", "–°—Ç–∞—Ç—É—Å",
       "–í–µ—Ä–Ω—É–ª—Å—è", "–í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è",
       "–ü–µ—Ä–≤—ã–π –≤—ä–µ–∑–¥ –≤ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã",
       "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º",
       "–í—Ä–µ–º—è –≤ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö"]
    –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å (day_from_ts .. day_to_ts), –≥–¥–µ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ UTC.
    –ü—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞ (+5 —á–∞—Å–æ–≤) —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—Ç UTC ‚Üí –ª–æ–∫–∞–ª—å–Ω–æ–µ.
    """
    results = []
    
    with open(regions_geojson_path, "r", encoding="utf-8") as f:
        regions_geojson = json.load(f)
    gdf_regions = gpd.GeoDataFrame.from_features(regions_geojson["features"])
    gdf_regions.crs = "EPSG:4326"
    if "shapeName" not in gdf_regions.columns:
        gdf_regions["shapeName"] = gdf_regions.get("name", "")
    
    progress_text = "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —é–Ω–∏—Ç–æ–≤..."
    my_bar = st.progress(0, text=progress_text)
    total_units = len(units_to_process)

    for i, unit_name in enumerate(units_to_process, start=1):
        unit_id = unit_dict[unit_name]
        track = get_track(SID, unit_id, day_from_ts, day_to_ts)

        if not track:
            results.append({
                "–Æ–Ω–∏—Ç": unit_name,
                "–î–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω": None,
                "–í—Ä–µ–º—è –≤—ã–µ–∑–¥–∞": None,
                "–°—Ç–∞—Ç—É—Å": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç—Ä–µ–∫—É",
                "–í–µ—Ä–Ω—É–ª—Å—è": None,
                "–í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è": None,
                "–ü–µ—Ä–≤—ã–π –≤—ä–µ–∑–¥ –≤ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã": "",
                "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç—Ä–µ–∫—É",
                "–í—Ä–µ–º—è –≤ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö": ""
            })
            my_bar.progress(i / total_units, text=f"{unit_name} ‚Äî –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            continue

        # –ù–∞–π–¥—ë–º timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏ (UTC)
        last_point_time = track[-1]["time"]
        last_message_dt = datetime.datetime.strptime(last_point_time, "%Y-%m-%d %H:%M:%S")
        last_message_ts = int(last_message_dt.timestamp())

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω (–ø–æ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–µ)
        df_first = pd.DataFrame([track[0]])
        df_first["geometry"] = df_first.apply(lambda row: Point(row["lon"], row["lat"]), axis=1)
        gdf_first = gpd.GeoDataFrame(df_first, geometry="geometry", crs="EPSG:4326")
        gdf_first_joined = gpd.sjoin(
            gdf_first,
            gdf_regions[['geometry', 'shapeName']],
            how="left",
            predicate="within"
        )
        home_region = gdf_first_joined.iloc[0]["shapeName"] if not gdf_first_joined.empty else None

        # –ü–æ–ª—É—á–∞–µ–º crossings (UTC)
        crossings = detect_region_crossings(track, regions_geojson_path)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —é–Ω–∏—Ç–∞
        responsible_set = set(responsible_regions.get(unit_name, []))

        # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤—ë–ª —é–Ω–∏—Ç –≤ –∫–∞–∂–¥–æ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º —Ä–µ–≥–∏–æ–Ω–µ
        region_seconds = compute_time_in_responsible_regions(
            crossings,
            start_of_day_ts=day_from_ts,
            last_message_ts=last_message_ts,
            responsible_set=responsible_set,
            initial_region=home_region
        )

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É "–†–µ–≥–∏–æ–Ω: –ß–ß:–ú–ú:–°–°"
        readable_times_resp = []
        for region_name, total_sec in region_seconds.items():
            if total_sec <= 0:
                continue
            hours = total_sec // 3600
            minutes = (total_sec % 3600) // 60
            seconds = total_sec % 60
            readable_times_resp.append(f"{region_name}: {hours:02d}:{minutes:02d}:{seconds:02d}")
        time_in_resp_str = "\n".join(readable_times_resp)

        # –í–∏–∑–∏—Ç/–≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ (–ø–æ UTC-—Å–æ–±—ã—Ç–∏—è–º)
        departure_event = None
        return_event = None
        returned_home = None

        if crossings:
            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –≤—ã–µ–∑–¥ –∏–∑ home_region (UTC)
            for idx, ev in enumerate(crossings):
                if ev["from_region"] == home_region:
                    departure_event = ev
                    break

            if departure_event:
                after_dep = crossings[idx+1:]
                return_indices = [j for j, e in enumerate(after_dep) if e["to_region"] == home_region]
                if return_indices:
                    last_return_idx = return_indices[-1]
                    return_event = after_dep[last_return_idx]
                    after_ret = after_dep[last_return_idx+1:]
                    left_again = any(e["from_region"] == home_region for e in after_ret)
                    if not left_again:
                        returned_home = True

        # –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤: –ø–µ—Ä–≤—ã–π –≤—ä–µ–∑–¥ –∏ —Å—Ç–∞—Ç—É—Å –ø–æ—Å–µ—â–µ–Ω–∏—è
        visited_regions = set(e["to_region"] for e in crossings if e["to_region"])
        first_entry_times = {}

        # 1) –ï—Å–ª–∏ home_region –≤—Ö–æ–¥–∏—Ç –≤ responsible_set, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π –≤—ä–µ–∑–¥ ‚Äì 00:00 –º–µ—Å—Ç–Ω–æ–≥–æ
        if home_region in responsible_set:
            # day_from_ts ‚Äì timestamp –¥–ª—è 00:00 –º–µ—Å—Ç–Ω–æ–≥–æ, 
            # –∞ UTC = –º–µ—Å—Ç–Ω–æ–µ ‚àí 5 —á–∞—Å–æ–≤
            first_entry_times[home_region] = day_from_ts - 5 * 3600

        # 2) –î–∞–ª—å—à–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
        for ev in crossings:
            region = ev["to_region"]
            if region in responsible_set and region not in first_entry_times:
                first_entry_times[region] = ev["time"]

        # –°–æ–±–∏—Ä–∞–µ–º ¬´—á–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—É—é¬ª —Å—Ç—Ä–æ–∫—É
        entry_times_str = []
        for r, t in first_entry_times.items():
            # t –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏–±–æ int (UTC-ts), –ª–∏–±–æ —Å—Ç—Ä–æ–∫–æ–π UTC –∏–∑ crossing
            if isinstance(t, int):
                # –ø–µ—Ä–µ–≤–æ–¥–∏–º UTC ‚Üí –º–µ—Å—Ç–Ω–æ–µ (+5h)
                val = datetime.datetime.fromtimestamp(t) + datetime.timedelta(hours=5)
                entry_times_str.append(f"{r}: {val.strftime('%H:%M:%S')}")
            else:
                # t ‚Äî —Å—Ç—Ä–æ–∫–∞ UTC, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–µ—Å—Ç–Ω–æ–µ
                val = pd.to_datetime(t) + pd.Timedelta(hours=5)
                entry_times_str.append(f"{r}: {val.strftime('%H:%M:%S')}")
        entry_times_str = "\n".join(entry_times_str)

        visited_resp = responsible_set & visited_regions
        not_visited_resp = responsible_set - visited_regions

        def format_regions(region_set):
            return ", ".join(sorted(str(r) for r in region_set if pd.notna(r)))

        if not responsible_set:
            region_comment = "‚ùî –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤"
        elif home_region in responsible_set:
            # –ï—Å–ª–∏ –¥–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω —Ç–æ–∂–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π, —Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—Å—á–∏—Ç–∞–Ω
            hit = visited_resp.union({home_region})
            missed = responsible_set - hit
            if missed:
                region_comment = f"‚úÖ –ü–æ—Å–µ—Ç–∏–ª: {format_regions(hit)} | ‚ùå –ù–µ –ø–æ—Å–µ—Ç–∏–ª: {format_regions(missed)}"
            else:
                region_comment = f"‚úÖ –ü–æ—Å–µ—Ç–∏–ª –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã: {format_regions(hit)}"
        elif not visited_resp:
            region_comment = "‚ùå –ù–∏ –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω –Ω–µ –ø–æ—Å–µ—â—ë–Ω"
        else:
            missed = not_visited_resp
            if missed:
                region_comment = f"‚úÖ –ü–æ—Å–µ—Ç–∏–ª: {format_regions(visited_resp)} | ‚ùå –ù–µ –ø–æ—Å–µ—Ç–∏–ª: {format_regions(missed)}"
            else:
                region_comment = f"‚úÖ –ü–æ—Å–µ—Ç–∏–ª –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã: {format_regions(visited_resp)}"

        # –î–ª—è –ø–æ–ª–µ–π "–í—Ä–µ–º—è –≤—ã–µ–∑–¥–∞" –∏ "–í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è" –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UTC ‚Üí –º–µ—Å—Ç–Ω–æ–µ (+5)
        dep_local = (
            (pd.to_datetime(departure_event["time"]) + pd.Timedelta(hours=5)).strftime("%Y-%m-%d %H:%M:%S")
            if departure_event else
            None
        )
        ret_local = (
            (pd.to_datetime(return_event["time"]) + pd.Timedelta(hours=5)).strftime("%Y-%m-%d %H:%M:%S")
            if return_event else
            None
        )

        results.append({
            "–Æ–Ω–∏—Ç": unit_name,
            "–î–æ–º–∞—à–Ω–∏–π —Ä–µ–≥–∏–æ–Ω": home_region,
            "–í—Ä–µ–º—è –≤—ã–µ–∑–¥–∞": dep_local,
            "–°—Ç–∞—Ç—É—Å": "–í—ã–µ—Ö–∞–ª" if departure_event else "–ï—â–µ –Ω–µ –≤—ã–µ—Ö–∞–ª",
            "–í–µ—Ä–Ω—É–ª—Å—è": True if return_event else False,
            "–í—Ä–µ–º—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è": ret_local,
            "–ü–µ—Ä–≤—ã–π –≤—ä–µ–∑–¥ –≤ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã": entry_times_str,
            "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º": region_comment,
            "–í—Ä–µ–º—è –≤ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö": time_in_resp_str
        })

        my_bar.progress(i / total_units, text=f"{unit_name} ‚úÖ")

    my_bar.empty()
    return pd.DataFrame(results)

# --- –ß—Ç–µ–Ω–∏–µ GeoJSON –¥–ª—è –∫–∞—Ä—Ç—ã (—Ä–µ–≥–∏–æ–Ω–æ–≤ –∏ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤) ---
with open(REGIONS_GEOJSON, "r", encoding="utf-8") as f:
    regions_geojson_str = json.dumps(json.load(f))
with open(CITIES_GEOJSON, "r", encoding="utf-8") as f:
    cities_geojson_str = json.dumps(json.load(f))

# ------------------ –ë–ª–æ–∫ 1: "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç—á—ë—Ç—ã –∏ –∫–∞—Ä—Ç—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤" ------------------
if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç—á—ë—Ç—ã –∏ –∫–∞—Ä—Ç—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —é–Ω–∏—Ç–æ–≤"):
    all_dates = pd.date_range(start=date_from, end=date_to, freq="D").to_pydatetime().tolist()

    for cur_date in all_dates:
        day_str = cur_date.strftime("%Y-%m-%d")
        st.markdown(f"## üìÖ –î–∞—Ç–∞: {day_str}")

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è (UTC)
        day_from_ts = int(datetime.datetime.combine(cur_date.date(), datetime.time.min).timestamp())
        day_to_ts   = int(datetime.datetime.combine(cur_date.date(), datetime.time.max).timestamp())

        for unit_name in selected_units:
            st.markdown(f"### üöò –Æ–Ω–∏—Ç: {unit_name}")
            unit_id = unit_dict[unit_name]

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á—ë—Ç –∏ —Ç—Ä–µ–∫ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
            report_result = execute_report(SID, res["id"], tpl_id, unit_id, day_from_ts, day_to_ts)
            detailed_points = get_track(SID, unit_id, day_from_ts, day_to_ts)

            # 1) –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏ (UTC)
            crossings = detect_region_crossings(detailed_points, REGIONS_GEOJSON)
            if crossings:
                st.subheader("‚õ≥ –ü–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É —Ä–µ–≥–∏–æ–Ω–∞–º–∏")
                # –ü—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UTC ‚Üí –º–µ—Å—Ç–Ω–æ–µ (+5) –¥–ª—è "time"
                df_crossings = pd.DataFrame(crossings)
                df_crossings["–Æ–Ω–∏—Ç"] = unit_name
                df_crossings["time_local"] = df_crossings["time"].apply(
                    lambda t: (pd.to_datetime(t) + pd.Timedelta(hours=5)).strftime("%Y-%m-%d %H:%M:%S")
                )
                st.dataframe(
                    df_crossings.drop(columns=["time"]).rename(columns={"time_local": "time"}),
                    use_container_width=True
                )
            else:
                st.info("–ù–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.")

            # 2) –¢–∞–±–ª–∏—Ü—ã –æ—Ç—á—ë—Ç–∞ (unit_trips –∏ unit_trace), —Å –∫–æ–Ω–≤–µ—Ä—Å–∏–µ–π UTC ‚Üí –º–µ—Å—Ç–Ω–æ–µ (+5)
            if "reportResult" in report_result:
                for table_index, table in enumerate(report_result["reportResult"]["tables"]):
                    if table["name"] not in ["unit_trips", "unit_trace"]:
                        continue
                    row_count = table["rows"]
                    headers = table["header"]
                    data = get_result_rows(SID, table_index, row_count)

                    parsed_rows = []
                    for row_obj in data:
                        line = []
                        for cell in row_obj["c"]:
                            if isinstance(cell, dict) and "t" in cell:
                                raw_val = cell["t"]
                            else:
                                raw_val = cell

                            if isinstance(raw_val, str) and re.match(r'^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$', raw_val):
                                try:
                                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UTC ‚Üí +5 —á–∞—Å–æ–≤
                                    dt = datetime.datetime.strptime(raw_val, "%Y-%m-%d %H:%M:%S") + datetime.timedelta(hours=5)
                                    val = dt.strftime("%Y-%m-%d %H:%M:%S")
                                except Exception:
                                    val = raw_val
                            elif isinstance(raw_val, (int, float)):
                                # –í —Å–ª—É—á–∞–µ timestamp —Ç–æ–∂–µ +5
                                dt = datetime.datetime.fromtimestamp(raw_val) + datetime.timedelta(hours=5)
                                val = dt.strftime("%Y-%m-%d %H:%M:%S")
                            else:
                                val = raw_val
                            line.append(val)
                        parsed_rows.append(line)

                    df = pd.DataFrame(parsed_rows, columns=headers)
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ "–ù–∞—á–∞–ª–æ" –∏ "–ö–æ–Ω–µ—Ü" –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
                    df["–ù–∞—á–∞–ª–æ"] = (
                        df
                        .apply(
                            lambda row: (
                                pd.to_datetime(str(row["–ù–∞—á–∞–ª–æ"]), format="%Y-%m-%d %H:%M:%S", errors="raise")
                            )
                            if re.match(r"^\d{4}-\d{2}-\d{2}", str(row["–ù–∞—á–∞–ª–æ"]))
                            else pd.to_datetime(
                                f"{row['Grouping']} {row['–ù–∞—á–∞–ª–æ']}",
                                format="%Y-%m-%d %H:%M:%S",
                                errors="coerce"
                            )
                            , axis=1
                        )
                        + pd.Timedelta(hours=5)
                    ).dt.strftime("%H:%M:%S")

                    df["–ö–æ–Ω–µ—Ü"] = (
                        df
                        .apply(
                            lambda row: (
                                pd.to_datetime(str(row["–ö–æ–Ω–µ—Ü"]), format="%Y-%m-%d %H:%M:%S", errors="raise")
                            )
                            if re.match(r"^\d{4}-\d{2}-\d{2}", str(row["–ö–æ–Ω–µ—Ü"]))
                            else pd.to_datetime(
                                f"{row['Grouping']} {row['–ö–æ–Ω–µ—Ü']}",
                                format="%Y-%m-%d %H:%M:%S",
                                errors="coerce"
                            )
                            , axis=1
                        )
                        + pd.Timedelta(hours=5)
                    ).dt.strftime("%H:%M:%S")

                    df.rename(columns={"Grouping": "–î–µ–Ω—å"}, inplace=True)
                    st.markdown(f"#### üìã –¢–∞–±–ª–∏—Ü–∞ '{table['name']}' –¥–ª—è {unit_name}")
                    st.dataframe(df, use_container_width=True)
            else:
                st.warning(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç—á—ë—Ç–µ –∑–∞ {day_str} –¥–ª—è {unit_name}")
                st.json(report_result)

            # 3) –ö–∞—Ä—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
            coords = [[p["lat"], p["lon"]] for p in detailed_points]
            last = coords[-1] if coords else None

            car_icon_url = "https://cdn-icons-png.flaticon.com/512/854/854866.png"
            coords_json = json.dumps(coords)
            last_point_json = json.dumps(last)
            map_html = f"""
            <div id="map_{day_str}_{unit_name}" style="height: 400px; margin-bottom: 30px;"></div>
            <script>
                var map = L.map('map_{day_str}_{unit_name}').setView([48.0, 68.0], 6);
                L.tileLayer('https://{{s}}.tile.openstreetmap.org/{{z}}/{{x}}/{{y}}.png').addTo(map);
                var coords = {coords_json};
                var last = {last_point_json};
                if (coords.length > 0) {{
                    var track = L.polyline(coords, {{color: 'red'}}).addTo(map);
                    map.fitBounds(track.getBounds());
                    if (last) {{
                        var carIcon = L.icon({{
                            iconUrl: "{car_icon_url}",
                            iconSize: [32, 32],
                            iconAnchor: [16, 16]
                        }});
                        L.marker([last[0], last[1]], {{icon: carIcon}}).addTo(map)
                            .bindPopup("üöó –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç–æ—á–∫–∞");
                    }}
                }}
                var regionsLayer = L.geoJSON({regions_geojson_str}, {{
                    style: function(feature) {{
                        return {{ color: 'black', weight: 1, fillOpacity: 0 }};
                    }},
                    onEachFeature: function(feature, layer) {{
                        if (feature.properties) {{
                            var regionName = feature.properties.shapeName || feature.properties.name;
                            if (regionName) {{
                                layer.bindTooltip(regionName, {{
                                    permanent: true,
                                    direction: 'center',
                                    className: 'region-label'
                                }});
                            }}
                        }}
                    }}
                }});    
                var citiesLayer = L.geoJSON({cities_geojson_str}, {{
                    pointToLayer: function(feature, latlng) {{
                        var marker = L.marker(latlng);
                        if (feature.properties && feature.properties.name) {{
                            marker.bindPopup(feature.properties.name);
                        }}
                        return marker;
                    }}
                }});  
                var cityCluster = L.markerClusterGroup();
                cityCluster.addLayer(citiesLayer);
                var overlays = {{
                    "–ì—Ä–∞–Ω–∏—Ü—ã —Ä–µ–≥–∏–æ–Ω–æ–≤": regionsLayer,
                    "–ü—É–Ω–∫—Ç—ã –Ω–∞—Å–µ–ª–µ–Ω–∏—è": cityCluster
                }};
                L.control.layers(null, overlays, {{collapsed: false}}).addTo(map);
                regionsLayer.addTo(map);
                cityCluster.addTo(map);
            </script>
            <style>
                .region-label {{
                    background-color: rgba(255, 255, 255, 0.7);
                    border: none;
                    font-size: 12px;
                    padding: 2px;
                }}
                .city-label {{
                    background-color: rgba(255, 255, 255, 0.7);
                    border: none;
                    font-size: 10px;
                    padding: 2px;
                }}
            </style>
            """
            st.components.v1.html(f"""
            <html>
            <head>
                <link
                  rel="stylesheet"
                  href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
                />
                <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
                <script src="https://unpkg.com/leaflet.markercluster@1.4.1/dist/leaflet.markercluster.js"></script>
            </head>
            <body>{map_html}</body></html>
            """, height=420)

    st.success("‚úÖ –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –∏ –∫–∞—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

# ------------------ –ë–ª–æ–∫ 2: "üì§ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ –≤—ã–µ–∑–¥—É –∏–∑ –¥–æ–º–∞—à–Ω–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞" ------------------
if st.button("üì§ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç –ø–æ –≤—ã–µ–∑–¥—É –∏–∑ –¥–æ–º–∞—à–Ω–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ (–î–ª—è –≤—Å–µ—Ö) (Excel + —Ç–∞–±–ª–∏—Ü—ã)"):
    # –°–Ω–∞—á–∞–ª–∞ —á–∏—Ç–∞–µ–º CSV —Å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ä–µ–≥–∏–æ–Ω–∞–º–∏
    df = pd.read_csv("manager_region.csv")
    responsible_regions = (
        df.groupby("Car_numb")["Region_mapped"]
        .apply(lambda x: list(set(x)))
        .to_dict()
    )

    all_dates = pd.date_range(start=date_from, end=date_to, freq="D").to_pydatetime().tolist()

    output = io.BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        for cur_date in all_dates:
            day_str = cur_date.strftime("%Y-%m-%d")
            day_from_ts = int(datetime.datetime.combine(cur_date.date(), datetime.time.min).timestamp())
            day_to_ts   = int(datetime.datetime.combine(cur_date.date(), datetime.time.max).timestamp())

            report_df = create_departure_report(
                unit_dict, list(unit_dict.keys()),
                SID, REGIONS_GEOJSON, responsible_regions,
                day_from_ts, day_to_ts
            )

            not_departed_df = report_df[report_df["–°—Ç–∞—Ç—É—Å"] == "–ï—â–µ –Ω–µ –≤—ã–µ—Ö–∞–ª"]
            departed_df     = report_df[report_df["–°—Ç–∞—Ç—É—Å"] == "–í—ã–µ—Ö–∞–ª"]

            # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω DF –Ω–µ –ø—É—Å—Ç, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ö
            if not not_departed_df.empty or not departed_df.empty:
                sheet_not = f"{day_str}_–ù–µ–í—ã–µ—Ö–∞–ª"
                sheet_dep = f"{day_str}_–í—ã–µ—Ö–∞–ª"
                not_departed_df.to_excel(writer, sheet_name=sheet_not, index=False)
                departed_df.to_excel(writer, sheet_name=sheet_dep, index=False)
            else:
                # –ò–Ω–∞—á–µ ‚Äî –ª–∏—Å—Ç ¬´–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö¬ª
                dummy = pd.DataFrame({"–°–æ–æ–±—â–µ–Ω–∏–µ": [f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {day_str}"]})
                dummy.to_excel(writer, sheet_name=f"{day_str}_–ù–µ—Ç–î–∞–Ω–Ω—ã—Ö", index=False)

    excel_data = output.getvalue()

    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å Excel-–æ—Ç—á–µ—Ç (–ø–æ –≤—Å–µ–º –¥–Ω—è–º —Å—Ä–∞–∑—É)",
        data=excel_data,
        file_name=f"departure_report_{date_from}_{date_to}.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
    st.success("‚úÖ –ï–¥–∏–Ω—ã–π Excel-–æ—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ.")
